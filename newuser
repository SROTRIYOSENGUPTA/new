create or replace package body pack_util as
  function f_split (
      i_string    in varchar2,
      i_delimiter in varchar2
  )
  return TYPE_SPLIT PIPELINED
  is
      x_one    TYPE_SPLIT_ROW;
      x_temp   varchar2(4000) := i_string;
      x_index  int;
      x_count  int := 1;
  begin
    LOOP
      IF (x_temp IS NULL)
      THEN
        EXIT;
      END IF;

      x_index := instr(x_temp, i_delimiter);

      IF (x_index > 0)
      THEN
        x_one.A := x_count;
        x_one.B := substr(x_temp, 1, x_index - 1);
        x_count := x_count + 1;

        PIPE ROW(x_one);

        x_temp := substr(x_temp, x_index + length(i_delimiter));
      ELSE
        x_one.A := x_count;
        x_one.B := x_temp;
        x_count := x_count + 1;

        PIPE ROW(x_one);

        EXIT;
      END IF;
    END LOOP;

    RETURN;
  end f_split;

  function f_getDepoConfig (
      i_depo_id    in int,
      i_category_1_id in int,
      i_position_type_id in int,
      i_counterparty_id in int,
      i_term_id in int
  )
   return TYPE_DEPO_CONF PIPELINED
  is
  x_depo_conf  TYPE_DEPO_CONF_ROW;
  begin
   select * into x_depo_conf from (
     select settlement_day_count  , settle_accrual_with_trade ,
         minimum_lot_size  , lot_size_increment  , term_id  ,settle_accrual_on_close  ,open_time , close_time
        ,pref_sec_id_type ,depo_id  ,category_1_id  ,position_type_id  , depo_config_id  ,maximum_lot_size,
        no_lot_warning_on_return , disable_accrual_settlement_for_trade
       from t_depoconfig
       where depo_id = i_depo_id and category_1_id = i_category_1_id
       and (position_type_id = i_position_type_id or position_type_id = (select parent_id from t_positiontype where position_type_id = i_position_type_id))
       and (term_id = i_term_id or term_id is null) and (counterparty_id = i_counterparty_id or counterparty_id is null)
       order by case when position_type_id = i_position_type_id then 1 else 2 end asc, counterparty_id, term_id)
       where rownum < 2;

   PIPE ROW(x_depo_conf);
   RETURN;
  end f_getDepoConfig;

  function f_getDate (
      i_hh_mm_ss  in  varchar2,       -- format: hh:mm:ss, or hh:mm
      i_date      in  date := trunc(sysdate),
      i_delimiter in  varchar2 := ':'
  )
  return date
  as
    x_count     int;
    x_format    varchar2(30) := 'mmddyyyy hh24:mi:ss';
    x_date      varchar2(30);
  begin
    x_date := to_char(trunc(i_date), 'mmddyyyy');

    select count(*)
    into x_count
    from table(f_split(i_hh_mm_ss, i_delimiter));

    if (x_count = 1)
    then
      x_format := 'mmddyyyy hh24';
    elsif (x_count = 2)
    then
      x_format := 'mmddyyyy hh24:mi';
    end if;

    return to_date(x_date || ' ' || i_hh_mm_ss, x_format);
  end f_getDate;

  -- select pack_util.f_getMonth(to_date('1/2/2009', 'mm/dd/yyyy'), to_date('5/23/2010', 'mm/dd/yyyy')) from dual
  -- select pack_util.f_getMonth(to_date('1/2/2012', 'mm/dd/yyyy'), to_date('5/23/2010', 'mm/dd/yyyy')) from dual
  function f_getMonth (
      i_date_1    in date,
      i_date_2    in date
  )
  return int
  as
    x_month   int;
  begin
    x_month := (to_number(to_char(i_date_2, 'yyyy')) - to_number(to_char(i_date_1, 'yyyy'))) * 12;
    x_month := x_month + (to_number(to_char(i_date_2, 'mm')) - to_number(to_char(i_date_1, 'mm')));

    return x_month;
  end f_getMonth;

  function f_getFirstDayInMonth (
    i_date  in date,
    i_calendar_id t_calendar.calendar_id%type := 1
  ) return date
  as
    Mo VARCHAR2(2);
    Yr VARCHAR2(4);
    x_date date;
  begin
    Mo := TO_CHAR(i_date, 'MM');
    Yr := TO_CHAR(i_date, 'YYYY');
    x_date := TO_DATE(Mo || '-01-' || Yr, 'MM-DD-YYYY');
    /*if f_isBusinessDate(1, x_date) <> 1
      then x_date := f_nextBusinessDate(i_calendar_id, x_date, 1);
    end if;*/
    return x_date;
  end f_getFirstDayInMonth;
   --- likne 134 + is my code for he new function added

function f_getnewDate ( -- this is the start of the function
    i_date in varchar2, -- this is the first input which is the date in string form
    i_format in varchar2 -- this is the second input in the formate of the date
)
return date
is
    x_converted_date date;
begin
    -- here we convert the string to a date
    x_converted_date := to_date(i_date, i_format);
    return x_converted_date;
exception
    -- this will catch exceptions if they're present
    when others then
        return null;
end f_convertStringToDate;
-- this is the end of the function

  function f_isBusinessDate (
      i_calendar_id     in  t_calendar.calendar_id%type := 1,     -- USA
      i_date            in  date := trunc(current_date)
  )
  return int
  as
      x_count     int;
      x_date      date := trunc(nvl(i_date, current_date));
  begin
    if (to_char(x_date, 'D') in (1, 7))     -- 1, 7 is for sunday and saturday
    then
        return 0;
    end if;

    select count(*) into x_count
    from t_holiday
    where calendar_id = nvl(i_calendar_id, 1)
      and holiday = x_date;

    if (x_count > 0)
    then
        return 0;
    end if;

    return 1;
  end f_isBusinessDate;

  function f_getBusinessDaysCountBetweenDates (
      i_calendar_id     in  t_calendar.calendar_id%type := 1,     -- USA
      i_start_date      in  date := trunc(current_date),
      i_end_date        in  date := trunc(current_date)
  )
  return int
  as
      x_count           int:=0;
      x_start_date      date := trunc(nvl(i_start_date, current_date));
      x_end_date        date := trunc(nvl(i_end_date, current_date));
  begin
    while(x_start_date <= x_end_date)
    LOOP
        if (pack_util.f_isBusinessDate(i_calendar_id, x_start_date) = 1)
        then
        x_count:=x_count+1;
        end if;
        x_start_date:=x_start_date+1;
    END LOOP;
    return x_count;
  end f_getBusinessDaysCountBetweenDates;


  function f_getDaysCountBetweenDates (
      i_start_date      in  date := trunc(current_date),
      i_end_date        in  date := trunc(current_date)
  )
  return int
  as
      x_count           int:=0;
  begin
    if (i_start_date <= i_end_date)
    then
      x_count := i_end_date - i_start_date;
    end if;
    return x_count;
  end f_getDaysCountBetweenDates;


  -- select pack_util.f_nextbusinessdate(1, to_date('8/20/2010', 'mm/dd/yyyy'), 0) from dual
  function f_nextBusinessDate (
      i_calendar_id     in  t_calendar.calendar_id%type := 1,     -- USA
      i_date            in  date := trunc(current_date),
      i_num_days    in  int := 1
  )
  return date
  as
      x_date      date := trunc(nvl(i_date, current_date)) + nvl(i_num_days, 1);
  begin
    while (pack_util.f_isBusinessDate(i_calendar_id, x_date) = 0)
    loop
        x_date := x_date + 1;
    end loop;

    return x_date;
  end f_nextBusinessDate;

  function f_getNthBusinessDate (
      i_calendar_id     in  t_calendar.calendar_id%type := 1,     -- USA
      i_date            in  date := trunc(current_date),
      i_n_days          in  int := 1 --Positive n for future dates, Negative n from prior dates,
                                     --Zero returns current date if it is a business date otherwise the next business date
  )
  return date
  as
      x_date      date := trunc(nvl(i_date, current_date));
      x_count     int;
      x_num_days  int := nvl(i_n_days, 1);
  begin
      if (x_num_days in (0, -1, 1))
      then
        x_date := x_date + x_num_days;

        while (pack_util.f_isBusinessDate(i_calendar_id, x_date) = 0)
        loop
          x_date := x_date + (mod(1, x_num_days) + x_num_days);
        end loop;
      else
        x_count := 1;

        while (x_count <= abs(x_num_days))
        loop
            x_date := x_date + (x_num_days/abs(x_num_days));

            while (pack_util.f_isBusinessDate(i_calendar_id, x_date) = 0)
            loop
              x_date := x_date + (x_num_days/abs(x_num_days));
            end loop;

            x_count := x_count + 1;
        end loop;
      end if;

    return x_date;
  end f_getNthBusinessDate;
////

this needs to be a more accurate name for this. newdate1 is not a valid name. also it must be in camel case.

Create a new function in this pack_util such that it should succeed when the date is not the valid date for the format, returning null instead. 
If the date is valid with respect to the format it should return the date provided. 2 varchars as input should be taken in 
Take 2 varchars as input and then return a date.
The function needs to be able to convert the string to date and return the date. 
It should be able to catch exceptions and when caught return null instead and this will end the program

.mz

