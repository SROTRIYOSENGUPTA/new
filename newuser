import java.sql.Connection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

public class YourClass {
    private static Map<String, Properties> statementHash = new HashMap<>();

    public static Properties getnewSearchStatement(Connection conn, int searchId, SBeanMetaUtil sBeanMetaUtil, List<SBeanListMeta> sBeanListMetaList)
            throws Exception {
        Properties props = new Properties();

        if (statementHash.containsKey(String.valueOf(searchId))) {
            return statementHash.get(String.valueOf(searchId));
        }

        if (sBeanListMetaList == null || sBeanListMetaList.isEmpty()) {
            System.out.println("No data is available in the sBeanListMetaList.");
            String text = "Search id " + searchId + " is not set up properly.";
            throw new Exception(text);
        }

        // Create an empty SBeanMeta object
        SBeanMeta sBeanMeta = new SBeanMeta();

        for (SBeanListMeta sBeanListMeta : sBeanListMetaList) {
            // Populate sBeanMeta with data from sBeanListMeta
            sBeanMeta.setTables(sBeanListMeta.getTables());
            sBeanMeta.setScondition(sBeanListMeta.getScondition());
            sBeanMeta.setGcondition(sBeanListMeta.getGcondition());
            sBeanMeta.setHcondition(sBeanListMeta.getHcondition());
            // Update rppage in sBeanMeta if necessary.
        }

        // Now sBeanMeta is populated with data from sBeanListMetaList

        props.put(SQLSearchStatement.TABLES, sBeanMeta.tables());

        if (sBeanMeta.scondition() != null && !sBeanMeta.scondition().isEmpty()) {
            props.put(SQLSearchStatement.STANDARD_CONDITION, sBeanMeta.scondition());
        }

        if (sBeanMeta.gcondition() != null && !sBeanMeta.gcondition().isEmpty()) {
            props.put(SQLSearchStatement.GROUP_BY_CONDITION, sBeanMeta.gcondition());
        }

        if (sBeanMeta.hcondition() != null && !sBeanMeta.hcondition().isEmpty()) {
            props.put(SQLSearchStatement.HAVING_CONDITION, sBeanMeta.hcondition());
        }

        if (sBeanMeta.rppage() > 0) {
            props.put(SQLSearchStatement.DEFAULT_RECORD_COUNT, String.valueOf(sBeanMeta.rppage()));
        }

        statementHash.put(String.valueOf(searchId), props);

        return props;
    }

    public static void main(String[] args) {
        SBeanMeta sBeanMeta = new SBeanMeta();
        Connection conn = null;
        int searchId = 123;

        try {
            // Initialize sBeanMetaUtil with valid arguments or adjust as needed
            SBeanMetaUtil sBeanMetaUtil = new SBeanMetaUtil(/* provide valid arguments */);

            // Replace this with your actual list of SBeanListMeta objects.
            List<SBeanListMeta> sBeanListMetaList = /* initialize your list here */;

            Properties result = getnewSearchStatement(conn, searchId, sBeanMetaUtil, sBeanListMetaList);
            System.out.println("Result: " + result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
