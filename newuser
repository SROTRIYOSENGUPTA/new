 public static Properties getnewSearchStatement(int searchId, SBeanMeta sBeanMeta) throws Exception {
        Properties props = new Properties();

       // SBeanMetaUtil sBeanMetaUtil = new SBeanMetaUtil();  // Creating an instance of SBeanMetaUtil

        if (statementHash.get(searchId + "") != null) {
            return ((Properties) statementHash.get(searchId + ""));
        }

        List<SBeanFieldMeta> fields = sBeanMetaUtil.getSBeanMeta("sample.json");

        if (fields != null && !fields.isEmpty()) {

            String tables = "";
            String scondition = "";
            String gcondition = "";
            String hcondition = "";
            int rppage = 0;

            props.put(SQLSearchStatement.TABLES, tables);

            if (scondition != null && !scondition.isEmpty()) {
                props.put(SQLSearchStatement.STANDARD_CONDITION, scondition);
            }

            if (gcondition != null && !gcondition.isEmpty()) {
                props.put(SQLSearchStatement.GROUP_BY_CONDITION, gcondition);
            }

            if (hcondition != null && !hcondition.isEmpty()) {
                props.put(SQLSearchStatement.HAVING_CONDITION, hcondition);
            }

            if (rppage > 0) {
                props.put(SQLSearchStatement.DEFAULT_RECORD_COUNT, String.valueOf(rppage));
            }

        } else {
            System.out.println("No data is available in the fields list.");
            String text = "Search id " + searchId + " is not set up properly.";
            log.error("Error executing");
            log.error(text);
            throw new Exception(text);
        }

        if (fields != null && !fields.isEmpty()) {

            sBeanMeta.tables();
            sBeanMeta.scondition();
            sBeanMeta.gcondition();
            // sBeanMeta.hcondition();

            statementHash.put(searchId + "", props);
        } else {
            System.out.println("No data is available in the fields list.");
            String text = "Search id " + searchId + " is not set up properly.";
            log.error("Error executing");
            log.error(text);
            throw new Exception(text);
        }
        return props;

    }

    public static void main(String[] args) {
        try {
            SBeanMeta sBeanMeta = new SBeanMeta(); // assuming a default constructor exists

            Properties props = getnewSearchStatement(1, sBeanMeta);

            if (props != null) {
                // Iterate through and print out each property
                for (String name : props.stringPropertyNames()) {
                    String value = props.getProperty(name);
                    System.out.println(name + ": " + value);
                }
            } else {
                System.out.println("Properties object is null.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


//

import java.util.*;

public class YourClass {

    private static Map<String, Properties> statementHash = new HashMap<>();

    public static Properties getNewSearchStatement(int searchId, SBeanMeta sBeanMeta) throws Exception {
        Properties props = new Properties();

        if (statementHash.get(String.valueOf(searchId)) != null) {
            return statementHash.get(String.valueOf(searchId));
        }

        List<SBeanFieldMeta> fields = sBeanMeta.fields; // Assuming fields is a public member 

        if (fields != null && !fields.isEmpty()) {
            String tables = sBeanMeta.tables;
            String scondition = sBeanMeta.scondition;
            String gcondition = sBeanMeta.gcondition;
            String hcondition = sBeanMeta.hcondition;
            int rppage = 0;

            props.put("TABLES", tables);
            props.put("STANDARD_CONDITION", scondition);
            props.put("GROUP_BY_CONDITION", gcondition);
            props.put("HAVING_CONDITION", hcondition);

            if (rppage > 0) {
                props.put("DEFAULT_RECORD_COUNT", String.valueOf(rppage));
            }

            statementHash.put(String.valueOf(searchId), props);
        } else {
            System.out.println("No data is available in the fields list.");
            String text = "Search id " + searchId + " is not set up properly.";
            throw new Exception(text);
        }

        return props;
    }

    public static void main(String[] args) {
        try {
            SBeanMeta sBeanMeta = new SBeanMeta(); // Assuming a default constructor exists
            sBeanMeta.tables = "sample_table";
            sBeanMeta.scondition = "sample_standard_condition";
            sBeanMeta.gcondition = "sample_group_by_condition";
            sBeanMeta.hcondition = "sample_having_condition";
            sBeanMeta.fields = new ArrayList<>(); // Initialize fields with sample values (add SBeanFieldMeta objects as necessary)

            Properties props = getNewSearchStatement(1, sBeanMeta);

            // Directly printing SBeanMeta values
            System.out.println("TABLES: " + sBeanMeta.tables);
            System.out.println("STANDARD_CONDITION: " + sBeanMeta.scondition);
            System.out.println("GROUP_BY_CONDITION: " + sBeanMeta.gcondition);
            System.out.println("HAVING_CONDITION: " + sBeanMeta.hcondition);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

// Define your SBeanMeta class here (without getters and setters as per your preference)
class SBeanMeta {
    public String tables;
    public String scondition;
    public String gcondition;
    public String hcondition;
    public List<SBeanFieldMeta> fields = new ArrayList<>(); // Assuming SBeanFieldMeta is a valid class
}

// You should also define the SBeanFieldMeta class as per your requirements.


public static void main(String[] args) {
    try {
        SBeanMeta sBeanMeta = new SBeanMeta(); // Assuming a default constructor exists
        sBeanMeta.tables = "sample_table";
        sBeanMeta.scondition = "sample_standard_condition";
        sBeanMeta.gcondition = "sample_group_by_condition";
        sBeanMeta.hcondition = "sample_having_condition";
        
        // Initialize fields with sample values
        sBeanMeta.fields = new ArrayList<>();
        sBeanMeta.fields.add(new SBeanFieldMeta("field1", "type1"));
        sBeanMeta.fields.add(new SBeanFieldMeta("field2", "type2"));

        Properties props = getNewSearchStatement(1, sBeanMeta);

        // Directly printing SBeanMeta values
        System.out.println("TABLES: " + sBeanMeta.tables);
        System.out.println("STANDARD_CONDITION: " + sBeanMeta.scondition);
        System.out.println("GROUP_BY_CONDITION: " + sBeanMeta.gcondition);
        System.out.println("HAVING_CONDITION: " + sBeanMeta.hcondition);

    } catch (Exception e) {
        e.printStackTrace();
    }
}
